<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库7</title>
      <link href="/2020/02/29/%E6%95%B0%E6%8D%AE%E5%BA%937/"/>
      <url>/2020/02/29/%E6%95%B0%E6%8D%AE%E5%BA%937/</url>
      
        <content type="html"><![CDATA[<h1 id="7数据库设计和E-R模型"><a href="#7数据库设计和E-R模型" class="headerlink" title="7数据库设计和E-R模型#"></a>7数据库设计和E-R模型#</h1><hr><h2 id="7-1设计过程概览"><a href="#7-1设计过程概览" class="headerlink" title="7.1设计过程概览"></a>7.1设计过程概览</h2><h3 id="7-1-1-设计阶段"><a href="#7-1-1-设计阶段" class="headerlink" title="7.1.1 设计阶段"></a>7.1.1 设计阶段</h3><ul><li><p>数据库设计的最初阶段需要完整地刻画未来数据用户的数据需求。</p></li><li><p>接下来，设计者选择数据模型，并采用所选数据模型的概念将这些需求转化为数据库的概念模式。我们在本章中将研究的实体-联系模型通常用于表示概念设计。<strong>概念模式</strong>定义了数据库中表示的实体、实体的属性、实体之间的联系、以及实体和联系上的约束。通常，概念设计阶段会导致E-R图的构建，它提供了对模式的图形化描述。</p></li><li><p>完善的概念模式还指明企业的功能需求。在功能需求规格说明中，用户描述将在数据上进行的各类操作。（增删改查）</p></li><li><p>从抽象数据模型到数据库实现的转化过程在最后两个设计阶段中进行。</p><ul><li><p>在逻辑设计阶段，设计者将高层概念模式隐射到将使用的数据库系统的实现数据模型上。</p></li><li><p>最后，设计者将所得到的系统特定的数据库模式使用到后续的物理设计阶段。</p></li></ul></li></ul><h3 id="7-1-2-设计选择"><a href="#7-1-2-设计选择" class="headerlink" title="7.1.2 设计选择"></a>7.1.2 设计选择</h3><p>实体：指明所有可明确识别的个体。</p><p>在设计一个数据库模式的时候，我们必须确保避免两个主要缺陷：<em>冗余，不完整。</em></p><h2 id="E-R-模型"><a href="#E-R-模型" class="headerlink" title="E-R 模型"></a>E-R 模型</h2><h3 id="7-2-1-实体集"><a href="#7-2-1-实体集" class="headerlink" title="7.2.1 实体集"></a>7.2.1 实体集</h3><p><strong>实体</strong>：现实世界中可区别于所有其他对象的一个“事物”或“对象”。</p><p><strong>实体集</strong>：相同类型即具有相同性质（或属性）的一个实体集合。<br><img src="https://i.loli.net/2020/02/29/1f6rqBDXdU8j5Ho.png" alt=""></p><p>在建模的过程中，我们通常抽象地使用术语实体集，而不是指某个个别实体的特别集合。我们用术语实体集的<strong>外延</strong>来指属于实体集的实体的实际集合。</p><p>实体通过一组<strong>属性</strong>来表示。属性是实体集中每个成员所拥有的描述性性质。但每个实体在每个属性上都有各自的值。</p><h3 id="7-2-2-联系集"><a href="#7-2-2-联系集" class="headerlink" title="7.2.2 联系集"></a>7.2.2 联系集</h3><p><strong>联系</strong>：指多个实体间的相互关联。</p><p><strong>联系集</strong> ：相同类型联系的集合。</p><p><img src="https://i.loli.net/2020/02/29/ZIcEVtPFYnmSAbU.png" alt=""><br><strong>参与</strong>：实体集之间的关联，也就是说实体集E1，E2…参与联系集R。<br><strong>角色</strong>：实体在联系中扮演的功能。当参与联系集的实体集并非互异的时候，也就是说同样的实体集以不同的角色参与一个联系集多于一次，在这一类联系集中，即有时称作<strong>自环的</strong>联系集中，有必要用显式的角色名来指明实体是如何参与联系实例的。<br>联系也可以具有<strong>描述性属性</strong>。给定的联系集中的一个联系实例必须是由其参与实体唯一标识的，而不必使用描述属性。<br><img src="https://i.loli.net/2020/02/29/TzYagME7rKSDloh.png" alt=""></p><h3 id="7-2-3-属性"><a href="#7-2-3-属性" class="headerlink" title="7.2.3 属性"></a>7.2.3 属性</h3><p>每个属性都有一个可取值的集合，称为该属性的<strong>域</strong>，或者<strong>值集</strong>。正规地说，实体集的属性是将实体集映射到于的函数。</p><p>由于一个实体集可能有多个属性，因此每个实体可以用一组（属性，数据值）来表示，实体集的每个属性对应一个这样的对。</p><p>E-R模型中的属性可以按照如下的属性类型来进行划分：</p><ul><li><strong>简单和复合属性</strong>：简单属性不能划分为更小的部分，复合属性可以再划分为更小的部分。</li><li><strong>单值和多值属性</strong>：为了表示一个属性是多值的，我们用花括号将属性名括住，例如：{phone_number}。在适当的情况下，可以对一个多值属性的取值数目设置上、下界。</li><li><strong>派生属性</strong>：这类属性的值可以从别的相关属性或实体派生出来。例如：age和date_of_birth。</li></ul><p>当实体在某个属性上没有值时，使用空值Null。可以表示缺失未知不适用。</p><h2 id="7-3-约束"><a href="#7-3-约束" class="headerlink" title="7.3 约束"></a>7.3 约束</h2><h3 id="7-3-1-映射基数"><a href="#7-3-1-映射基数" class="headerlink" title="7.3.1 映射基数"></a>7.3.1 映射基数</h3><p>** 映射基数 **，或基数比率，表示一个实体通过一个联系集能关联的实体的个数。（一对一，一对多，多对一，多对多）<br><img src="https://i.loli.net/2020/02/29/s9TU4pnburRvFPi.png" alt=""></p><h3 id="7-3-2-参与约束"><a href="#7-3-2-参与约束" class="headerlink" title="7.3.2 参与约束"></a>7.3.2 参与约束</h3><p>如果实体集E中的每个实体都参与到联系集R的至少一个联系中，实体集E在联系集R中的参与称为<strong>全部</strong>的。</p><p>如果E只有部分实体参与到R的联系中，实体集E到联系集R的参与称为<strong>部分</strong>的。</p><h3 id="7-3-3-码"><a href="#7-3-3-码" class="headerlink" title="7.3.3 码"></a>7.3.3 码</h3><p>码是数据系统中的基本概念。所谓码就是能唯一标识实体的属性，他是整个实体集的性质，而不是单个实体的性质。它包括<em>超码，候选码，主码</em>。码同样用于唯一地标识联系，并从而将联系互相分开。</p><p><strong>超码</strong>是一个或多个属性的集合，这些属性可以让我们在一个实体集中唯一地标识一个实体。如果K是一个超码，那么K的任意超集也是超码，也就是说如果K是超码，那么所有包含K的集合也是超码。　</p><p><strong>候选码</strong>是从超码中选出的，自然地候选码也是一个或多个属性的集合。因为超码的范围太广，很多是我们并不感兴趣即无用处的。所以候选码是最小超码，它们的任意真子集都不能成为超码。</p><p><strong>主码</strong>：被数据库设计者选中的，用来在同一实体集中区分不同实体的候选码；此外，应该选择哪些从不或极少变化的属性</p><h2 id="7-4-从实体集中删除冗余属性"><a href="#7-4-从实体集中删除冗余属性" class="headerlink" title="7.4 从实体集中删除冗余属性"></a>7.4 从实体集中删除冗余属性</h2><h2 id="7-5-E-R联系图"><a href="#7-5-E-R联系图" class="headerlink" title="7.5 E-R联系图"></a>7.5 E-R联系图</h2><h3 id="7-5-1-基本结构"><a href="#7-5-1-基本结构" class="headerlink" title="7.5.1 基本结构"></a>7.5.1 基本结构</h3><p>E-R图包括如下几个主要构件：</p><ul><li><strong>分成两部分的矩形</strong>代表实体集。</li><li><strong>菱形</strong>代表联系集。</li><li><strong>未分割的矩形</strong>代表联系集的属性</li><li><strong>线段</strong>将实体集连接到联系集。</li><li><strong>虚线</strong>将联系集属性连接到联系集。</li><li><strong>双线</strong>显示实体在联系集中的参与度。</li><li><strong>双菱形</strong>代表连接到弱实体集的标志性联系集。<br><img src="https://i.loli.net/2020/02/29/nUOL6NXqA84TsRZ.png" alt=""></li></ul><h3 id="7-5-2-映射函数"><a href="#7-5-2-映射函数" class="headerlink" title="7.5.2 映射函数"></a>7.5.2 映射函数</h3><p><img src="https://i.loli.net/2020/02/29/fHgdpsqQlbYt2RI.png" alt=""></p><p>A-&gt;B表示一个A对应一个B，A-B表示一个A对应多个B </p><p>E-R图还提供了一种描述每个实体参与联系集中的联系的次数的更复杂的约束方法。实体集和二元联系集之间的一条边可以有一个关联的最大和最小的映射函数，用<strong>l…h</strong>的形式表示。l表示最小映射函数，h表示最大映射函数，*表示没有限制。</p><h3 id="7-5-4-角色"><a href="#7-5-4-角色" class="headerlink" title="7.5.4 角色"></a>7.5.4 角色</h3><p>在E-R图中，我们通过在菱形和矩形之间的连线上进行标注来表示角色。</p><h3 id="7-5-5-非二元的联系集"><a href="#7-5-5-非二元的联系集" class="headerlink" title="7.5.5 非二元的联系集"></a>7.5.5 非二元的联系集</h3><h3 id="7-5-6-弱实体集"><a href="#7-5-6-弱实体集" class="headerlink" title="7.5.6 弱实体集"></a>7.5.6 弱实体集</h3><p>没有足够的属性以形成主码的实体集称为<strong>弱实体集</strong>，有主码的实体集称作<strong>强实体集</strong>。</p><p>弱实体集必须与另一个称作<strong>标识</strong>或<strong>属主实体集</strong>的实体集关联才能有意义。即，<em>弱实体集存在依赖于标识实体集</em>，我们称标识实体集<strong>拥有</strong>它所标识的弱实体集。将弱实体集与其标识实体集相连的联系称为<strong>标识性联系</strong>。</p><p>弱实体集的<strong>分辨符</strong>使得我们进行区分依赖于特定强实体集的弱实体集中的实体的属性集合。</p><p><img src="https://i.loli.net/2020/02/29/34s8ZRk6pyBJfSe.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概念第一章</title>
      <link href="/2020/02/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2020/02/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库系统概念第一章"><a href="#数据库系统概念第一章" class="headerlink" title="数据库系统概念第一章"></a>数据库系统概念第一章</h1><hr><p><strong>数据库管理系统DBMS：</strong> 由一个相互关联的数据的集合（即<strong>数据库DB</strong>）和一组用以访问这些数据的程序组成。         </p><p><strong>数据抽象：</strong>           </p><ul><li><strong>物理层</strong>：最低层次的抽象，描述数据实际上是怎样存储的。物理层详细描述复杂的底层数据结构             </li><li><strong>逻辑层</strong>：比物理层层次稍高的抽象，描述数据库中存储什么数据及这些数据间存在什么关系。虽然逻辑层的简单结构的实现可能涉及复杂的物理层结构，但逻辑层用户不必知道这样的复杂性，这称作<strong>物理数据独立性</strong>。数据库管理员使用抽象的逻辑层，他必须确定数据库中应该保存哪些信息。           </li><li><strong>视图层</strong>：最高层次的抽象，只描述整个数据库的某个部分。数据库系统的很多用户并不需要关心所有的信息，而只需要访问数据库的一部分。系统可以为同一数据库提供多个视图。<br><img src="https://i.loli.net/2020/02/22/hOdi5Qk2T94YXKu.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
